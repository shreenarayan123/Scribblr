generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String
  name      String?
  password  String
  bio       String?    @default("An anonymous user | author")
  img       String?
  posts     Post[]     @relation("UserPosts", map: "UserPostsRelation")
  followers Follower[] @relation("UserFollowers", map: "UserFollowersRelation")

  following Follower[] @relation("UserFollowing", map: "UserFollowingRelation")

  bookmarks Bookmark[] @relation("UserBookmarks", map: "UserBookmarksRelation")
  claps     Clap[]
}

model Post {
  id            String       @id @default(uuid())
  title         String
  content       String
  publishedDate DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  published     Boolean      @default(false)
  author        User         @relation("UserPosts", fields: [authorId], references: [id], map: "PostAuthorRelation", onDelete: Cascade)
  authorId      String
  img           String?
  bookmarks     Bookmark[]   @relation("PostBookmarks", map: "PostBookmarksRelation")
  tags          TagsOnPost[]
  claps         Clap[]
}

model Clap {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  commentId String?
}


model Follower {
  id         String @id @default(uuid())
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], map: "FollowerRelation", onDelete: Cascade)
  followerId String
  followee   User   @relation("UserFollowers", fields: [followeeId], references: [id], map: "FolloweeRelation", onDelete: Cascade)
  followeeId String

  @@unique([followerId, followeeId], map: "UniqueFollowers")
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation("UserBookmarks", fields: [userId], references: [id], map: "UserBookmarkRelation", onDelete: Cascade)
  userId String
  post   Post   @relation("PostBookmarks", fields: [postId], references: [id], map: "PostBookmarkRelation", onDelete: Cascade)
  postId String

  @@unique([userId, postId], map: "UniqueBookmarks")
}

model Tag {
  id         String       @id @default(uuid())
  topic      String
  tagsOnPost TagsOnPost[] @relation("Tags", map: "TagsRelation")

  @@unique([topic], map: "UniqueTags")
}

model TagsOnPost {
  id     String @id @default(uuid())
  tag    Tag    @relation("Tags", fields: [tagId], references: [id], map: "TagsOnPost", onDelete: Cascade)
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([tagId, postId], map: "UniqueTagsOnPost")
}
